// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class finishedCoinFlip extends ethereum.Event {
  get params(): finishedCoinFlip__Params {
    return new finishedCoinFlip__Params(this);
  }
}

export class finishedCoinFlip__Params {
  _event: finishedCoinFlip;

  constructor(event: finishedCoinFlip) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get loser(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isFinished(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class startedCoinFlip extends ethereum.Event {
  get params(): startedCoinFlip__Params {
    return new startedCoinFlip__Params(this);
  }
}

export class startedCoinFlip__Params {
  _event: startedCoinFlip;

  constructor(event: startedCoinFlip) {
    this._event = event;
  }

  get theCoinFlipID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get theBetStarter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get theStartingWager(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isFinished(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class Contract__EtherCoinFlipStructsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: Address;
  value8: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: Address,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getID(): BigInt {
    return this.value0;
  }

  getBetStarter(): Address {
    return this.value1;
  }

  getStartingWager(): BigInt {
    return this.value2;
  }

  getBetEnder(): Address {
    return this.value3;
  }

  getEndingWager(): BigInt {
    return this.value4;
  }

  getEtherTotal(): BigInt {
    return this.value5;
  }

  getWinner(): Address {
    return this.value6;
  }

  getLoser(): Address {
    return this.value7;
  }

  getIsFinished(): boolean {
    return this.value8;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  EtherCoinFlipStructs(param0: BigInt): Contract__EtherCoinFlipStructsResult {
    let result = super.call(
      "EtherCoinFlipStructs",
      "EtherCoinFlipStructs(uint256):(uint256,address,uint256,address,uint256,uint256,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__EtherCoinFlipStructsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toAddress(),
      result[8].toBoolean()
    );
  }

  try_EtherCoinFlipStructs(
    param0: BigInt
  ): ethereum.CallResult<Contract__EtherCoinFlipStructsResult> {
    let result = super.tryCall(
      "EtherCoinFlipStructs",
      "EtherCoinFlipStructs(uint256):(uint256,address,uint256,address,uint256,uint256,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__EtherCoinFlipStructsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toAddress(),
        value[8].toBoolean()
      )
    );
  }
}

export class EndCoinFlipCall extends ethereum.Call {
  get inputs(): EndCoinFlipCall__Inputs {
    return new EndCoinFlipCall__Inputs(this);
  }

  get outputs(): EndCoinFlipCall__Outputs {
    return new EndCoinFlipCall__Outputs(this);
  }
}

export class EndCoinFlipCall__Inputs {
  _call: EndCoinFlipCall;

  constructor(call: EndCoinFlipCall) {
    this._call = call;
  }

  get coinFlipID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EndCoinFlipCall__Outputs {
  _call: EndCoinFlipCall;

  constructor(call: EndCoinFlipCall) {
    this._call = call;
  }
}

export class NewCoinFlipCall extends ethereum.Call {
  get inputs(): NewCoinFlipCall__Inputs {
    return new NewCoinFlipCall__Inputs(this);
  }

  get outputs(): NewCoinFlipCall__Outputs {
    return new NewCoinFlipCall__Outputs(this);
  }
}

export class NewCoinFlipCall__Inputs {
  _call: NewCoinFlipCall;

  constructor(call: NewCoinFlipCall) {
    this._call = call;
  }
}

export class NewCoinFlipCall__Outputs {
  _call: NewCoinFlipCall;

  constructor(call: NewCoinFlipCall) {
    this._call = call;
  }

  get coinFlipID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
