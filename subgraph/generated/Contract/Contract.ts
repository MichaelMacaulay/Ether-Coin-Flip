// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class endedCoinFlips extends ethereum.Event {
  get params(): endedCoinFlips__Params {
    return new endedCoinFlips__Params(this);
  }
}

export class endedCoinFlips__Params {
  _event: endedCoinFlips;

  constructor(event: endedCoinFlips) {
    this._event = event;
  }

  get theCoinFlipID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get betStarter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get betEnder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get etherTotal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class startedCoinFlips extends ethereum.Event {
  get params(): startedCoinFlips__Params {
    return new startedCoinFlips__Params(this);
  }
}

export class startedCoinFlips__Params {
  _event: startedCoinFlips;

  constructor(event: startedCoinFlips) {
    this._event = event;
  }

  get theCoinFlipID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get theBetStarter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get theStartingWager(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__activeCoinFlipsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getID(): BigInt {
    return this.value0;
  }

  getBetStarter(): Address {
    return this.value1;
  }

  getStartingWager(): BigInt {
    return this.value2;
  }

  getBetEnder(): Address {
    return this.value3;
  }

  getEndingWager(): BigInt {
    return this.value4;
  }

  getEtherTotal(): BigInt {
    return this.value5;
  }
}

export class Contract__finishedCoinFlipsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getID(): BigInt {
    return this.value0;
  }

  getBetStarter(): Address {
    return this.value1;
  }

  getStartingWager(): BigInt {
    return this.value2;
  }

  getBetEnder(): Address {
    return this.value3;
  }

  getEndingWager(): BigInt {
    return this.value4;
  }

  getEtherTotal(): BigInt {
    return this.value5;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  activeCoinFlips(param0: BigInt): Contract__activeCoinFlipsResult {
    let result = super.call(
      "activeCoinFlips",
      "activeCoinFlips(uint256):(uint256,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__activeCoinFlipsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_activeCoinFlips(
    param0: BigInt
  ): ethereum.CallResult<Contract__activeCoinFlipsResult> {
    let result = super.tryCall(
      "activeCoinFlips",
      "activeCoinFlips(uint256):(uint256,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__activeCoinFlipsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  finishedCoinFlips(param0: BigInt): Contract__finishedCoinFlipsResult {
    let result = super.call(
      "finishedCoinFlips",
      "finishedCoinFlips(uint256):(uint256,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__finishedCoinFlipsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_finishedCoinFlips(
    param0: BigInt
  ): ethereum.CallResult<Contract__finishedCoinFlipsResult> {
    let result = super.tryCall(
      "finishedCoinFlips",
      "finishedCoinFlips(uint256):(uint256,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__finishedCoinFlipsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }
}

export class EndCoinFlipCall extends ethereum.Call {
  get inputs(): EndCoinFlipCall__Inputs {
    return new EndCoinFlipCall__Inputs(this);
  }

  get outputs(): EndCoinFlipCall__Outputs {
    return new EndCoinFlipCall__Outputs(this);
  }
}

export class EndCoinFlipCall__Inputs {
  _call: EndCoinFlipCall;

  constructor(call: EndCoinFlipCall) {
    this._call = call;
  }

  get coinFlipID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EndCoinFlipCall__Outputs {
  _call: EndCoinFlipCall;

  constructor(call: EndCoinFlipCall) {
    this._call = call;
  }
}

export class NewCoinFlipCall extends ethereum.Call {
  get inputs(): NewCoinFlipCall__Inputs {
    return new NewCoinFlipCall__Inputs(this);
  }

  get outputs(): NewCoinFlipCall__Outputs {
    return new NewCoinFlipCall__Outputs(this);
  }
}

export class NewCoinFlipCall__Inputs {
  _call: NewCoinFlipCall;

  constructor(call: NewCoinFlipCall) {
    this._call = call;
  }
}

export class NewCoinFlipCall__Outputs {
  _call: NewCoinFlipCall;

  constructor(call: NewCoinFlipCall) {
    this._call = call;
  }

  get coinFlipID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
